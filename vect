#include <stdio.h>
#include <Windows.h>
#include <iostream>
#include <conio.h>
#include <assert.h>
#include <clocale>


using namespace std;

template <typename T>
class CVector
{
	private:
		int size;
		T *coord;
		bool ok();
	public:
		CVector ();
		CVector(int);
		~CVector ();
		void Dump();
		CVector<T> operator +(CVector<T>&a);
		CVector<T> operator -(CVector<T>&a);
		void operator --();
		void operator ++();
		void operator +=(T);
		void operator -=(T);
		CVector<T>& operator =(CVector<T>&a);
		bool operator ==(CVector<T>&a);
		T operator [](int);
};

template <typename T>
CVector<T>::CVector()
{
	size = 5;
	for(int i = 0; i< size; i++)
		coord[i] = 0;
}

template <typename T>
CVector<T>::CVector(int n)
{
	size = n;
	coord = new T [size];
	for (int i = 0; i < size; i++)
		cin >>coord[i];
};

template <typename T>
CVector<T>::~CVector()
{
	delete [] coord;
	size = 0;
};

template <typename T>
bool CVector<T>::ok()
{
 return (this && coord)? true : false;
};

template <typename T>
void CVector<T>::Dump()
{

	if ( ok() == 0 ) cout << "Something wrong\n";
	if (size == 0) cout << "Null vector\n";
	cout << "size = "  << size << endl;
	for (int i = 0; i < size; i++)
		cout << "coord " << i << " = " << coord[i] << endl;
};

template <typename T>
CVector<T> CVector<T>::operator +(CVector<T>&a)
{
	if ( ok() == 0 || a.ok() == 0 ) {Dump(); a.Dump(); exit(-1);}
	else {
	if (a.size == size ) 
	{
		CVector& res = *this;
		for (int i = 0; i < size; i++)
		{
			res.coord[i] = coord[i] + a.coord[i];
		}
		return res;
	}
	else {cout << "Sizes aren't similar\n"; exit (-1);}
	}
};

template <typename T>
CVector<T> CVector<T>::operator -(CVector<T>&a)
{
	if ( ok() == 0 || a.ok() == 0 ) {Dump(); a.Dump(); exit(-1);}
	else {
	if (a.size == size ) 
	{
		CVector& res = *this;
		for (int i = 0; i < size; i++)
		{
			res.coord[i] = coord[i] - a.coord[i];
		}
		return res;
	}
	else {cout << "Sizes aren't similar\n"; exit (-1);}
	}
};

template <typename T>
void CVector<T>:: operator --()
{
	if ( ok() == 0  ) {Dump(); exit(-1);}
	else 
	for (int i = 0; i < size; i++)
		coord[i]--;
};

template <typename T>
void CVector<T>:: operator ++()
{
	if ( ok() == 0  ) {Dump(); exit(-1);}
	else 
	for (int i = 0; i < size; i++)
		coord[i]++;
};

template <typename T>
void CVector<T>:: operator +=(T n)
{
	if ( ok() == 0  ) {Dump(); exit(-1);}
	else 
	for (int i = 0; i < size; i++)
		coord[i]+=n;
};

template <typename T>
void CVector<T>:: operator -=(T n)
{
	if ( ok() == 0  ) {Dump(); exit(-1);}
	else 
	for (int i = 0; i < size; i++)
		coord[i]-=n;
};

template <typename T>
CVector<T>& CVector<T>::operator =(CVector<T>&a)
{
	if ( ok() == 0 || a.ok() == 0 ) {Dump(); a.Dump(); exit(-1);}
	else {
		delete []coord;
		coord = new T[a.size];
		size = a.size;
		for (int i = 0; i < size; i++)
		{
			coord[i] = a.coord[i];		}
		return *this;
	}
};

template <typename T>
bool CVector<T>::operator ==(CVector<T>&a)
{
	bool b = 1;
	if ( ok() == 0 || a.ok() == 0 ) {Dump(); a.Dump(); exit(-1);}
	else 
	{
	if (a.size == size ) 
		for (int i = 0; i < size; i++)
		
		{if (coord [i] != a.coord[i]) b = 0;}
	else  b = 0;
	}
	return b;
};

template <typename T>
T CVector<T>:: operator [](int i)
{
	
	if ( ok() == 0  ) {Dump(); exit(-1);}
	else {
		if ( i < size ) return coord [i];
		else {cout <<"Doesn't exist"; exit(-1);}}
};



int main()
{
	CVector<double> t1 (2), t2 (2);
	t1-=4;
	t1.Dump();
	system("pause");
	return 0;
}
